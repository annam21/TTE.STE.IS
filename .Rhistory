toevent <- rexp(nocc, rate = lambda)
toevent[toevent > censor] <- NA
# test it first
ste_eh <- tibble::tibble(
occ = 1:nocc,
start = as.POSIXct(Sys.time()),
end=as.POSIXct(Sys.time()),
STE = toevent,
censor = censor
)
ste_estN_fn(ste_eh, study_area = A)
# Good.
whichcam
# deploy <- dat %>%
#   mutate(start = datetime,
#          end = datetime,
#          area = a) %>%
#   select(-datetime, -count)
deploy <- tibble::tibble(
cam = 1:ncam,
start = min(datetime),
end = max(datetime),
area = a
)
study_dates <- c(min(datetime), max(datetime))
occ <- build_occ(samp_freq = 3600, # seconds between the start of each sampling occasion
samp_length = 10, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
ste_eh <- ste_build_eh(dat, deploy, occ)
ste_estN_fn(ste_eh)
ste_estN_fn(ste_eh, A)
.947-(.024*1.95)
.865-(.039*1.95)
.831-(.045*1.95)
.831+(.045*1.95)
.561-(.095*1.95)
.561+(.095*1.95)
.731-(.074*1.95)
.731+(.074*1.95)
.692-(.075*1.95)
.692+(.075*1.95)
38/92
1-(38/92)
92-38
photo_data <- read_csv("../manuscripts/simulated_data.csv")
# Debug
# Get ste_build_eh to work on timelapse effort
library(tidyverse)
photo_data <- read_csv("../manuscripts/simulated_data.csv")
effort <- read_csv("simulated_effort.csv")
effort <- read_csv("../manuscripts/simulated_effort.csv")
photo_data
effort
devtools::load_all(".")
devtools::load_all(".")
# Debug
# Get ste_build_eh to work on timelapse effort
library(tidyverse)
photo_data <- read_csv("../manuscripts/simulated_data.csv")
# Make effort with timelapse
effort <- photo_data %>%
rename(start = datetime) %>%
mutate(end = start,
area = 4) %>%
select(-count)
df<- photo_data
deploy<- effort
# Occasions
occasions <- build_occ(
samp_freq = 3600, # seconds between the start of each sampling occasion
samp_length = 0, # duration of each sampling occasion (seconds)
study_start = min(effort$start),
study_end = max(effort$end)
)
occ <- occasions
# Run all my data checks here
df <- validate_df(df)
df
deploy <- validate_deploy(deploy)
deploy %>%
verify(has_all_names("cam", "start", "end", "area"))
deploy %>%
verify(has_all_names("cam", "start", "end", "area")) %>%
# Check class of all columns
verify(is.numeric(area)) %>%
verify(area >= 0) %>%
# Check start and end
validate_start_end(.)
ov <- find_overlap(deploy)
if(nrow(ov) != 0){
print(ov)
stop("There are overlapping time intervals in deploy")
} else{
return(deploy)
}
out <- x %>%
assertr::verify(has_all_names("cam", "start", "end")) %>%
mutate(int = lubridate::interval(start, end)) %>%
group_by(cam) %>%
filter(n() > 1)
deploy%>%    assertr::verify(has_all_names("cam", "start", "end")) %>%
mutate(int = lubridate::interval(start, end)) %>%
group_by(cam) %>%
filter(n() > 1)
out <- deploy%>%    assertr::verify(has_all_names("cam", "start", "end")) %>%
mutate(int = lubridate::interval(start, end)) %>%
group_by(cam) %>%
filter(n() > 1)
nrow(out != 1)
nrow(out)!=1
out %>%
mutate(chk = list(int))
out %>%
mutate(chk = list(int)) %>%
rowwise() %>% # If this returns empty dataframe, the next step fails.
mutate(overlap = overl(int, chk))
x<- effort
x
x %>%
assertr::verify(has_all_names("cam", "start", "end"))
x %>%
assertr::verify(has_all_names("cam", "start", "end")) %>%
distinct()
x %>%
assertr::verify(has_all_names("cam", "start", "end")) %>%
duplicated()
x %>%
assertr::verify(has_all_names("cam", "start", "end")) %>%
filter(duplicated())
x %>%
assertr::verify(has_all_names("cam", "start", "end"))
# Make sure there is only 1 effort for each time
x %>%
assertr::verify(has_all_names("cam", "start", "end")) %>%
group_by(cam, start, end) %>%
count()
x %>%
assertr::verify(has_all_names("cam", "start", "end")) %>%
group_by(cam, start, end) %>%
count() %>%
filter(n != 1) %>%
verify(nrow(.) == 0)
x %>%
distinct()
x %>%
distinct() %>%
assertr::verify(has_all_names("cam", "start", "end")) %>%
group_by(cam, start, end) %>%
count() %>%
filter(n != 1) %>%
assertr::verify(nrow(.) == 0)
x %>%
filter(start != end )
# See if start to end are length 0 (timelapse)
tl <- x %>%
filter(start != end )
nrow(tl) == 0
# See if start to end are length 0 (It's a timelapse effort)
tl <- x %>%
filter(start != end )
tl
x %>%
distinct()
out %>%
group_by(cam, start, end) %>%
count() %>%
filter(n != 1) %>%
assertr::verify(nrow(.) == 0)
devtools::load_all(".")
# Debug
# Get ste_build_eh to work on timelapse effort
library(tidyverse)
photo_data <- read_csv("../manuscripts/simulated_data.csv")
# Make effort with timelapse
effort <- photo_data %>%
rename(start = datetime) %>%
mutate(end = start,
area = 4) %>%
select(-count)
# Occasions
occasions <- build_occ(
samp_freq = 3600, # seconds between the start of each sampling occasion
samp_length = 0, # duration of each sampling occasion (seconds)
study_start = min(effort$start),
study_end = max(effort$end)
)
# Run all my data checks here
df <- validate_df(df)
deploy <- validate_deploy(deploy)
# The part to debug
df <- photo_data
deploy <- effort
occ <- occasions
# Run all my data checks here
df <- validate_df(df)
deploy <- validate_deploy(deploy)
devtools::load_all(".")
deploy <- validate_deploy(deploy)
devtools::load_all(".")
deploy <- validate_deploy(deploy)
deploy
occ <- validate_occ(occ)
# Subset is not technically necessary because everything hinges on occ later.
d1 <- min(occ$start)
d2 <- max(occ$end)
df_s <- study_subset(df, "datetime", NULL, d1, d2)
deploy_s <- study_subset(deploy, "start", "end", d1, d2)
# Then validate df and deploy together (should really do after subset)
validate_df_deploy(df_s, deploy_s) # This one is weird because it doesn't return anything if all good...
devtools::load_all(".")
library(tidyverse)
photo_data <- read_csv("../manuscripts/simulated_data.csv")
# Make effort with timelapse
effort <- photo_data %>%
rename(start = datetime) %>%
mutate(end = start,
area = 4) %>%
select(-count)
# Occasions
occasions <- build_occ(
samp_freq = 3600, # seconds between the start of each sampling occasion
samp_length = 0, # duration of each sampling occasion (seconds)
study_start = min(effort$start),
study_end = max(effort$end)
)
# The part to debug
# df <- photo_data
# deploy <- effort
# occ <- occasions
ste_eh <- ste_build_eh(photo_data, effort, occasions)
# Make sure it works
ste_estN_fn(ste_eh, 10000)
# Make effort with timelapse
effort <- photo_data %>%
rename(start = datetime) %>%
mutate(end = start,
area = 4) %>%
select(-count)
# Occasions
occasions <- build_occ(
samp_freq = 3600, # seconds between the start of each sampling occasion
samp_length = 0, # duration of each sampling occasion (seconds)
study_start = min(effort$start),
study_end = max(effort$end)
)
# The part to debug
# df <- photo_data
# deploy <- effort
# occ <- occasions
ste_eh <- ste_build_eh(photo_data, effort, occasions)
# Make sure it works
ste_estN_fn(ste_eh, 10000)
# Make effort with timelapse
effort <- photo_data %>%
rename(start = datetime) %>%
mutate(end = start,
area = 4) %>%
select(-count)
# Occasions
occasions <- build_occ(
samp_freq = 3600, # seconds between the start of each sampling occasion
samp_length = 0, # duration of each sampling occasion (seconds)
study_start = min(effort$start),
study_end = max(effort$end)
)
# The part to debug
# df <- photo_data
# deploy <- effort
# occ <- occasions
ste_eh <- ste_build_eh(photo_data, effort, occasions)
# Make sure it works
ste_estN_fn(ste_eh, 10000)
df <- tibble::tibble(
cam = c(1,1,1,2,2,2),
datetime = c(1,2,3,1,2,3),
count = c(1,4,2,0,0,5)
)
deploy <- tibble::tibble(
cam = c(1,2),
start = 1,
end = 3,
area = 10
)
?build_occ
as.POSIXct(1)
as.POSIXct(Sys.time())
Sys.time()
class(Sys.time())
df <- tibble::tibble(
cam = c(1,1,1,2,2,2),
datetime = rep(c(Sys.time()-10000,Sys.time()-5000,Sys.time()), 2),
count = c(1,4,2,0,0,5)
)
df
library(dplyr)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 0, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
ise_eh <- ise_build_eh(df, deploy, occ)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600, # seconds between the start of each sampling occasion
samp_length = 10, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
ise_eh <- ise_build_eh(df, deploy, occ)
head(ise_eh)
ise_eh
occ
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-02 12:02:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 2, 0, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600, # seconds between the start of each sampling occasion
samp_length = 10, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
ise_eh <- ise_build_eh(df, deploy, occ)
ise_estN_fn(
ise_eh,
study_area = 1e6
)
df
occ
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-02 12:00:02",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 2, 0, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600, # seconds between the start of each sampling occasion
samp_length = 10, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
ise_eh <- ise_build_eh(df, deploy, occ)
ise_estN_fn(
ise_eh,
study_area = 1e6
)
ise_eh
ise_eh%>%filter(occ==37)
study_area = 1e6
# First, get rid of occasions where area = 0
ise_eh2 <- ise_eh %>%
filter(area != 0)
ise_eh2
devtools::load_all(".")
ise_estN_fn(
ise_eh,
study_area = 1e6
)
devtools::load_all(".")
?add_int
?spaceNtime
# Normal, motion-sensor
df <- data.frame(
cam = c(1, 1, 2, 2, 2, 2, 2, 3),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 12:00:06",
"2016-01-02 14:00:00",
"2016-01-02 14:00:05",
"2016-01-03 16:53:42",
"2016-01-02 14:00:00"),
tz = "GMT"),
count = c(1, 0, 0, 1, 1, 1, 2, 1)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2, 3),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00",
"2016-01-01 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450, 300)
)
deploy
deploy %<%
deploy %>% filter(end - start >= 0)
library(tidyverse)
deploy %>% filter(end - start >= 0)
deploy %>% filter(start - end < 0)
deploy %>% filter(end - start < 0)
466.66+237.50
466.66+237.50-475
466.66*3
166.66*3
166.66*2
1e6
1000000
5.6 + 1.4*1.96; 5.6-1.4*1.96
65-4.8*1.96;65+4.8*1.96
16.7-2.5*1.96;16.7+2.5*1.96
devtools::load_all(".")
browseVignettes("spaceNtime")
?spaceNtime
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
?tidyverse
?dplyr
35*5
175*.2
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
?dplyr
devtools::load_all(".")
?dplyr
?spaceNtime
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
source('~/GitHub/spaceNtime/R/spaceNtime-package.R')
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
