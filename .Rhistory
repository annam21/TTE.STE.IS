devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
?plot_crayons
??plot_crayons
devtools::load_all(".")
?spaceNtime
browseVignettes("spaceNtime")
?browseVignettes
browseVignettes("spaceNtime")
devtools::load_all(".")
?spaceNtime
source('~/GitHub/spaceNtime/R/spaceNtime-package.R')
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
usethis::use_package_doc()
usethis::use_package_doc()
devtools::load_all(".")
?spaceNtime
package?spaceNtime
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
package?spaceNtime
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
?camtrapR
??camtrapR
devtools::load_all(".")
?spaceNtime
package?camtrapR
help("package:camtrapR")
install.packages("camtrapR")
help("package:camtrapR")
?camtrapR
package?camtrapR
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
install.packages("roxygen2")
devtools::load_all(".")
?spaceNtime
?spaceNtime
install.packages("devtools")
install.packages("devtools")
library(roxygen2)
devtools::load_all(".")
?spaceNtime
devtools::load_all(".")
?spaceNtime
devtools::install_github("annam21/spaceNtime@1.1.2", build_opts = c("--no-resave-data", "--no-manual"), force = T, build_vignettes = T)
devtools::install_github("annam21/spaceNtime@1.1.2", build_opts = c("--no-resave-data", "--no-manual"), force = T, build_vignettes = T)
?spaceNtime
??spaceNtime
devtools::install_github("annam21/spaceNtime",
#build_opts = c("--no-resave-data", "--no-manual"),
force = T,
build_vignettes = T)
?spaceNtime
??spaceNtime
?suppressMessages
message("ABC", "DEF")
suppressMessages(message("ABC"))
??tictoc
devtools::load_all(".")
library(tidyverse)
# Load pictures
load("../CameraTrapStudy/2015 data/pics.wide20160804.RData")
# Make dataframe
df <- pics %>%
select(cam, timeGMT, elkpresent) %>%
filter(elkpresent == T) %>%
mutate(count = as.numeric(elkpresent)
) %>%
rename(datetime = timeGMT)
# Make a pretend deploy, as if all always working
deploy <- pics %>%
distinct(cam, op.start, op.end) %>%
# fix problem child
mutate(op.start = replace(op.start, cam == "AM158", "2016-01-05 17:00:00") ) %>%
mutate(start = as.POSIXct(op.start),
start = lubridate::force_tz(start, "GMT"),
end = as.POSIXct(op.end),
end = lubridate::force_tz(end, "GMT"),
area = 250
) %>%
select(-op.start, -op.end)
study_dates <- as.POSIXct(c("2016-01-01 01:04:18", "2016-03-27 00:00:00"),
tz = "GMT")
# Now actually use the package
occ <- build_occ(samp_freq = 40000,
samp_length = 1,
study_start = study_dates[1],
study_end = study_dates[2])
ste_eh <- ste_build_eh(df, deploy, occ, quiet = T)
ste_eh <- ste_build_eh(df, deploy, occ)
?ste_build_eh
devtools::load_all(".")
ste_eh <- ste_build_eh(df, deploy, occ)
devtools::load_all(".")
ste_eh <- ste_build_eh(df, deploy, occ)
ste_eh <- ste_build_eh(df, deploy, occ, quiet = T)
devtools::load_all(".")
ste_eh <- ste_build_eh(df, deploy, occ, quiet = T)
devtools::load_all(".")
ste_eh <- ste_build_eh(df, deploy, occ, quiet = T)
ste_eh <- ste_build_eh(df, deploy, occ, quiet = F)
?tictoc::toc
devtools::load_all(".")
ste_eh <- ste_build_eh(df, deploy, occ)
ste_eh <- ste_build_eh(df, deploy, occ, quite = T)
ste_eh <- ste_build_eh(df, deploy, occ, quiet = T)
?ste_build_eh
?strptime
devtools::load_all(".")
devtools::load_all(".")
?ise_build_eh
?tte_build_eh
library(tidyverse)
# Load pictures
load("../CameraTrapStudy/2015 data/pics.wide20160804.RData")
# Make dataframe
df <- pics %>%
select(cam, timeGMT, elkpresent) %>%
filter(elkpresent == T) %>%
mutate(count = as.numeric(elkpresent)
) %>%
rename(datetime = timeGMT)
# Make a pretend deploy, as if all always working
deploy <- pics %>%
distinct(cam, op.start, op.end) %>%
# fix problem child
mutate(op.start = replace(op.start, cam == "AM158", "2016-01-05 17:00:00") ) %>%
mutate(start = as.POSIXct(op.start),
start = lubridate::force_tz(start, "GMT"),
end = as.POSIXct(op.end),
end = lubridate::force_tz(end, "GMT"),
area = 250
) %>%
select(-op.start, -op.end)
study_dates <- as.POSIXct(c("2016-01-01 01:04:18", "2016-03-27 00:00:00"),
tz = "GMT")
browseVignettes(spaceNtime)
browseVignettes("spaceNtime")
?spaceNtime
??spaceNtime
devtools::load_all(".")
##################################################################################
# Time to event
tte_occ <- build_occ(samp_freq = 3600*10,
samp_length = 3600*8,
study_start = study_dates[1],
study_end = study_dates[2])
per <- tte_samp_per(deploy, lps = 36/3600)
tte_eh <- tte_build_eh(df, deploy, occ, per)
tte_eh <- tte_build_eh(df, deploy, tte_occ, per)
devtools::load_all(".")
tte_eh <- tte_build_eh(df, deploy, tte_occ, per)
eff <- effort_fn(deploy_s, occ)
tictoc::tic("Data checks")
# Data checks (exact same as STE)
df <- validate_df(df)
deploy <- validate_deploy(deploy)
occ <- validate_occ(occ)
# Forcing a data subset so I can validate df and deploy together.
# Subset is not technically necessary because everything hinges on occ later.
d1 <- min(occ$start)
d2 <- max(occ$end)
df_s <- study_subset(df, "datetime", NULL, d1, d2)
deploy_s <- study_subset(deploy, "start", "end", d1, d2)
# Then validate df and deploy together (should really do after subset)
validate_df_deploy(df_s, deploy_s) # This one is weird because it doesn't return anything if all good...
tictoc::toc(...)
# Build effort for each cam at each occasion
tictoc::tic("effort")
eff <- effort_fn(deploy_s, occ)
tictoc::toc(...)
head(eff)
# Data checks (exact same as STE)
df <- validate_df(df)
deploy <- validate_deploy(deploy)
occ <- validate_occ(occ)
# Forcing a data subset so I can validate df and deploy together.
# Subset is not technically necessary because everything hinges on occ later.
d1 <- min(occ$start)
#()
eff <- effort_fn(deploy, tte_occ)
#()
effort <- effort_fn(deploy, tte_occ)
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int)
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam")
head(eff)
effort
1000/12
??spaceNtime
citation(spaceNtime)
citation("spaceNtime")
devtools::load_all(".")
citation("spaceNtime")
devtools::load_all(".")
citation("spaceNtime")
devtools::install_github("annam21/spaceNtime", force = T, build_vignettes =T)
install.packages("rland")
install.packages("rlang")
devtools::install_github("annam21/spaceNtime", force = T, build_vignettes =T)
citation("spaceNtime")
browseVignettes("spaceNtime")
??spaceNtime
devtools::load_all(".")
library(tidyverse)
# Load pictures
load("../CameraTrapStudy/2015 data/pics.wide20160804.RData")
library(dplyr)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 0, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600, # seconds between the start of each sampling occasion
samp_length = 10, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
ste_eh <- ste_build_eh(df, deploy, occ)
ste_eh
ste_estN_fn(ste_eh, study_area = 1e6)
browseVignettes("spaceNtime")
library(dplyr)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
tte_samp_per(deploy ,lps = 30/3600)
devtools::load_all(".")
tte_samp_per(deploy ,lps = 30/3600)
tte_estN_fn(
tte_eh,
study_area = 1e6
)
tte_estN_fn(tte_eh, study_area = 1e6)
tte_build_eh(df, deploy, occ, per)
tte_estN_fn()
tte_build_eh()
build_occ
build_occ()
ise_build_eh()
ise_estN_fn()
ste_build_occ()
ste_build_eh()
ste_estN_fn()
ste_build_eh()
3600/60
3600/60/60
36/100
41.66*24
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 2, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600,
samp_length = 10,
study_start = study_dates[1],
study_end = study_dates[2])
devtools::load_all(".")
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600,
samp_length = 10,
study_start = study_dates[1],
study_end = study_dates[2])
df_s <- study_subset(df, "datetime", NULL, d1, d2)
deploy_s <- study_subset(deploy, "start", "end", d1, d2)
# Then validate df and deploy together (should really do after subset)
validate_df_deploy(df_s, deploy_s) # This one is weird because it doesn't return anything if all good...
# Subset is not technically necessary because everything hinges on occ later.
d1 <- min(occ$start)
d2 <- max(occ$end)
df_s <- study_subset(df, "datetime", NULL, d1, d2)
deploy_s <- study_subset(deploy, "start", "end", d1, d2)
# Then validate df and deploy together (should really do after subset)
validate_df_deploy(df_s, deploy_s) # This one is weird because it doesn't return anything if all good...
eff <- effort_fn(deploy_s, occ)
censor <- ste_calc_censor(eff)
out <- ste_calc_toevent(df_s, occ, eff)   %>%
mutate(censor = censor$censor)
head(out)
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 2, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600,
samp_length = 10,
study_start = study_dates[1],
study_end = study_dates[2])
devtools::load_all(".")
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 2, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600,
samp_length = 10,
study_start = study_dates[1],
study_end = study_dates[2])
occ
df <- validate_df(df)
deploy <- validate_deploy(deploy)
occ <- validate_occ(occ)
# Forcing a data subset so I can validate df and deploy together.
# Subset is not technically necessary because everything hinges on occ later.
d1 <- min(occ$start)
d2 <- max(occ$end)
df_s <- study_subset(df, "datetime", NULL, d1, d2)
deploy_s <- study_subset(deploy, "start", "end", d1, d2)
# Then validate df and deploy together (should really do after subset)
validate_df_deploy(df_s, deploy_s) # This one is weird because it doesn't return anything if all good...
eff <- effort_fn(deploy_s, occ)
eff
censor <- ste_calc_censor(eff)
censor
out <- ste_calc_toevent(df_s, occ, eff)   %>%
mutate(censor = censor$censor)
out
effort<-eff
# Find sampling occasions where counts exist
# This captures any count within the occasion. Later, I take only the first
count_at_occ <- df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# Take only the first at each camera at each occasion
distinct(occ, cam, .keep_all = T) %>%
select(occ, cam, count)
count_at_occ
effort %>%
# Randomly order cameras at each occasion
group_by(occ) %>%
sample_n(n()) %>%
# Join up our counts
left_join(., count_at_occ, by = c("occ", "cam"))
43/24
24*1.8
24*1.8*1.8
# Missouri elk STE workflow
# Anna Moeller
# 10/15/20
# Load packages
library(tidyverse)
library(spaceNtime)
# working directory
setwd("D:/Box Sync/Teaching/Demographic Parameters F20")
# Read in the csv - photos
dat <- read_csv("camera_data.csv")
# Read in the csv - effort
deploy <- read_csv("effort_2017.csv")
# Build occasions
study_dates <- as.POSIXct(c("2017-09-01 00:00:00", "2017-11-30 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600,
samp_length = 60,
study_start = study_dates[1],
study_end = study_dates[2])
# Build encounter history
ste_eh <- ste_build_eh(dat_proc, deploy, occ)
ste_eh
# Estimate abundance
ste_estN_fn(ste_eh, study_area = 896000000)
# Build encounter history
ste_eh <- ste_build_eh(dat, deploy, occ)
ste_eh
# Estimate abundance
ste_estN_fn(ste_eh, study_area = 896000000)
browseVignettes("spaceNtime")
c(3,10,3, 1,2,9, 2,1,2, 19,19,13, 3,5,10, 1,2,5, 4,1,2, 17,14,14)
dat <- data.frame(F1 = c(3,10,3),F2=c(1,2,9), F3=c(2,1,2),F4 = c(19,19,13),
M1=c(3,5,10), M2=(1,2,5),M3=c(4,1,2),M4=c(17,14,14))
dat <- data.frame(F1 = c(3,10,3),F2=c(1,2,9), F3=c(2,1,2),F4 = c(19,19,13),
M1=c(3,5,10), M2=c(1,2,5),M3=c(4,1,2),M4=c(17,14,14))
dat
library(tidyverse)
dat%>%mutate(sum = F1+F2+F3+F4+M1+M2+M3+M4)
