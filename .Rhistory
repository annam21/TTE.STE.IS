# Calculate the censors
# Calculate TTE at each camera at each occasion
# tmp <-
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# Take only the first event in the sampling occasion
group_by(cam, occ) %>%
filter(!duplicated(occ)) %>%
# Join back up with all cams and occasions
select(cam, occ, datetime, count) %>%
left_join(effort, ., by = c("occ", "cam")) %>%
# select(cam, occ, start, end, int, area) %>%
arrange(cam, occ) %>%
# Calculate TTE
mutate(TTE = as.numeric(datetime) - as.numeric(start),
TTE = TTE/samp_per) %>%
# Calculate censor
mutate(censor = as.numeric(end) - as.numeric(start)) %>%
as.data.frame %>% head()
# Calculate the censors
# Calculate TTE at each camera at each occasion
# tmp <-
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# Take only the first event in the sampling occasion
group_by(cam, occ) %>%
filter(!duplicated(occ)) %>%
# Join back up with all cams and occasions
select(cam, occ, datetime, count) %>%
left_join(effort, ., by = c("occ", "cam")) %>%
# select(cam, occ, start, end, int, area) %>%
arrange(cam, occ) %>%
# Calculate TTE
mutate(TTE = as.numeric(datetime) - as.numeric(start),
TTE = TTE/samp_per) %>%
# Calculate censor
mutate(censor = as.numeric(end) - as.numeric(start),
censor = censor/samp_per) %>%
as.data.frame %>% head()
# tte_calc_toevent(df, occ, effort)
tmp <- df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# Take only the first event in the sampling occasion
group_by(cam, occ) %>%
filter(!duplicated(occ)) %>%
# Join back up with all cams and occasions
select(cam, occ, datetime, count) %>%
left_join(effort, ., by = c("occ", "cam")) %>%
# select(cam, occ, start, end, int, area) %>%
arrange(cam, occ) %>%
# Calculate TTE
mutate(TTE = as.numeric(datetime) - as.numeric(start),
TTE = TTE/samp_per) %>%
# Calculate censor
mutate(censor = as.numeric(end) - as.numeric(start),
censor = censor/samp_per)
x<-tmp
dat <- list(toevent = matrix(x$TTE, nrow = length(unique(x$cam))),
censor = x$censor)
dat
opt <- suppressWarnings(
stats::optim(log(1/mean(dat$toevent, na.rm = T)),
exp_logl_fn,
x = dat,
control = list(fnscale = -1),
hessian = T)
)
opt
# Estimate of lambda
estlam <- exp(opt$par)
# estlam is average density per m2
estN <- estlam * study_area
estlam
?ste_build_eh
?spaceNtime::ste_build_eh
devtools::load_all(".")
?samp_per
# Sampling period length
per <- tte_samp_per(deploy, lps = 2)
devtools::load_all(".")
# Sampling period length
per <- tte_samp_per(deploy, lps = 2)
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 0, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600 * 10, # seconds between the start of each sampling occasion
samp_length = 3600 * 10, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
# Sampling period length
per <- tte_samp_per(deploy, lps = 2)
per
?ste_calc_toevent
devtools::load_all(".")
?ste_build_eh
devtools::load_all(".")
devtools::load_all(".")
?tte_calc_toevent
devtools::load_all(".")
occ
per
tte_eh <- tte_build_eh(df, deploy, occ)
tte_eh <- tte_build_eh(df, deploy, occ, per)
tte_eh
tte_eh%>%as.data.frame()
2/60
30/60
effort<-eff
eff <- effort_fn(deploy_s, occ)
deploy_s <- study_subset(deploy, "start", "end", d1, d2)
# Subset is not technically necessary because everything hinges on occ later.
d1 <- min(occ$start)
d2 <- max(occ$end)
df_s <- study_subset(df, "datetime", NULL, d1, d2)
deploy_s <- study_subset(deploy, "start", "end", d1, d2)
# Then validate df and deploy together (should really do after subset)
validate_df_deploy(df_s, deploy_s) # This one is weird because it doesn't return anything if all good...
eff <- effort_fn(deploy_s, occ)
effort<-eff
out <- df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int)
out
df %>%
filter(count > 0) %>%
left_join(effort, .,  by = "cam") %>%
filter(datetime %within% int) %>%
# Take only the first event in the sampling occasion
group_by(cam, occ) %>%
filter(!duplicated(occ)) %>%
# Join back up with all cams and occasions
select(cam, occ, datetime, count) %>%
left_join(effort, ., by = c("occ", "cam")) %>%
# select(cam, occ, start, end, int, area) %>%
arrange(cam, occ) %>%
# Calculate TTE
mutate(TTE = as.numeric(datetime) - as.numeric(start)
)
devtools::load_all(".")
tte_eh <- tte_build_eh(df, deploy, occ, per)
tte_eh
tte_eh%>%as.data.frame()
36000/8
.5/60
# Sampling period length
per <- tte_samp_per(deploy, lps = 0.0083)
tte_eh <- tte_build_eh(df, deploy, occ, per)
tte_eh
tte_eh%>%as.data.frame()
30/3600
library(dplyr)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
tte_eh <- tte_build_eh(df, deploy, occ)
tte_eh <- tte_build_eh(df, deploy, occ)
tte_eh <- tte_build_eh(df, deploy, occ,  per)
tte_eh <- tte_build_eh(df, deploy, occ,  per)
head(tte_eh)
ste_estN_fn(
tte_eh,
study_area = 1e6
)
ste_estN_fn(
tte_eh %>% mutate(STE = TTE),
study_area = 1e6
)
?ste_estN_fn
eh<-tte_eh
dat <- list(toevent = matrix(eh$TTE, nrow = length(unique(eh$cam))),
censor = eh$censor)
dat
opt <- suppressWarnings(
stats::optim(log(1/mean(dat$toevent, na.rm = T)),
exp_logl_fn,
eh = dat,
control = list(fnscale = -1),
hessian = T)
)
opt <- suppressWarnings(
stats::optim(log(1/mean(dat$toevent, na.rm = T)),
exp_logl_fn,
x = eh,
control = list(fnscale = -1),
hessian = T)
)
opt <- suppressWarnings(
stats::optim(log(1/mean(dat$toevent, na.rm = T)),
exp_logl_fn,
x = dat,
control = list(fnscale = -1),
hessian = T)
)
opt
# Estimate of lambda
estlam <- exp(opt$par)
estlam
# estlam is average density per m2
estN <- estlam * study_area
tte_eh <- tte_build_eh(df, deploy, occ, per)
# Estimate abundance
tte_estN_fn(tte_eh, study_area = 1e6)
devtools::load_all(".")
# Estimate abundance
tte_estN_fn(tte_eh, study_area = 1e6)
devtools::build_vignettes()
library(dplyr)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 0, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600,
samp_length = 10,
study_start = study_dates[1],
study_end = study_dates[2])
devtools::load_all(".")
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600, # seconds between the start of each sampling occasion
samp_length = 10, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
ste_eh <- ste_build_eh(df, deploy, occ)
ste_eh
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600,
samp_length = 10,
study_start = study_dates[1],
study_end = study_dates[2])
per <- tte_samp_per(deploy, lps = 30/3600)
tte_eh <- tte_build_eh(df, deploy, occ,  per)
head(tte_eh)
tte_estN_fn(
tte_eh,
study_area = 1e6
)
tte_eh
eh<-tte_eh
dat <- list(toevent = matrix(eh$TTE, nrow = length(unique(eh$cam))),
censor = eh$censor)
dat
opt <- suppressWarnings(
stats::optim(log(1/mean(dat$toevent, na.rm = T)),
exp_logl_fn,
x = dat,
control = list(fnscale = -1),
hessian = T)
)
head(dat)
eh
eh%>%as.data.fram%>% head
eh%>%as.data.frame %>% head
eh$TTE
30/3600
per
per <- tte_samp_per(deploy, lps = 30/3600)
per
# Subset is not technically necessary because everything hinges on occ later.
d1 <- min(occ$start)
d2 <- max(occ$end)
df_s <- study_subset(df, "datetime", NULL, d1, d2)
deploy_s <- study_subset(deploy, "start", "end", d1, d2)
eff <- effort_fn(deploy_s, occ)
out <- tte_calc_toevent(df, eff, samp_per)
out <- tte_calc_toevent(df, eff, per)
out
out%>%as.data.frame()%>%head
out$TTE
out <- tte_calc_toevent(df, eff, per = 2)
out <- tte_calc_toevent(df, eff, 2)
out$TTE
df
occ
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600 * 10,
samp_length = 3600 * 10,
study_start = study_dates[1],
study_end = study_dates[2])
per <- tte_samp_per(deploy, lps = 30/3600)
tte_eh <- tte_build_eh(df, deploy, occ,  per)
head(tte_eh)
tte_estN_fn(
tte_eh,
study_area = 1e6
)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600 * 10,
samp_length = 3600 * 8,
study_start = study_dates[1],
study_end = study_dates[2])
per <- tte_samp_per(deploy, lps = 30/3600)
tte_eh <- tte_build_eh(df, deploy, occ,  per)
head(tte_eh)
tte_estN_fn(
tte_eh,
study_area = 1e6
)
build_vignettes()
devtools:build_vignette()
devtools::build_vignettes()
devtools::load_all(".")
browseVignettes()
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 0, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
occ <- build_occ(samp_freq = 3600 * 10, # seconds between the start of each sampling occasion
samp_length = 3600 * 10, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
# Sampling period length
per <- tte_samp_per(deploy, lps = 0.0083)
devtools::load_all(".")
# Sampling period length
per <- tte_samp_per(deploy, lps = 0.0083)
tte_eh <- tte_build_eh(df, deploy, occ, per)
occ <- build_occ(samp_freq = 3600 * 10, # seconds between the start of each sampling occasion
samp_length = 3600 * 10, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
tte_eh <- tte_build_eh(df, deploy, occ, per)
# Estimate abundance
tte_estN_fn(tte_eh, study_area = 1e6)
?ste_build_eh
ste_eh <- (df, deploy, occ)
ste_eh <- ste_build_eh(df, deploy, occ)
occ <- build_occ(samp_freq = 3600, # seconds between the start of each sampling occasion
samp_length = 3599, # duration of each sampling occasion (seconds)
study_start = study_dates[1],
study_end = study_dates[2])
ste_eh <- ste_build_eh(df, deploy, occ)
ste_estN_fn(ste_eh, study_area = 1e6)
tte_eh <- tte_build_eh(df, deploy, occ, per)
# Estimate abundance
tte_estN_fn(tte_eh, study_area = 1e6)
10/1
10/2
per
mn_area <- mean(deploy$area)
# Super rough estimate of distance across
out <- sqrt(mn_area)/lps
mean
mn_area
head(tte_eh)
head(tte_eh)%>%as.data.frame()
9079/48
per
1/per
mn_area
30/3600
# Estimate abundance
tte_estN_fn(tte_eh, study_area = 1e6)
# Estimate abundance
tte_estN_fn(tte_eh, study_area = 1e6)/mn_area
tte_eh
head(tte_eh)%>%as.data.frame()
tte_eh2 <- tte_eh %>% mutate(TTE = TTE*mn_area, censor = censor * mn_area)
tte_eh2 %>% as.data.frame()
# Estimate abundance
tte_estN_fn(tte_eh2, study_area = 1e6)
devtools::load_all(".")
tte_eh <- tte_build_eh(df, deploy, occ, per)
# Estimate abundance
tte_estN_fn(tte_eh, study_area = 1e6)
768/60
devtools::install_github("annam21/spaceNtime", build_opts = c("--no-resave-data", "--no-manual"), force = T, build_vignettes = T)
devtools::load_all(".")
devtools::build_vignettes()
browseVignettes("spaceNtime")
devtools::build_vignettes()
browseVignettes()
devtools::install_github("annam21/spaceNtime", build_opts = c("--no-resave-data", "--no-manual"), force = T, build_vignettes = T
)
devtools::load_all(".")
devtools::build_vignettes()
browseVignettes()
browseVignettes("spaceNtime")
devtools::install_github("annam21/spaceNtime", build_opts = c("--no-resave-data", "--no-manual"), force = T, build_vignettes = T
)
browseVignettes("spaceNtime")
devtools::load_all(".")
browseVignettes("spaceNtime")
df <- data.frame(
cam = c(1,1,2,2,2),
datetime = as.POSIXct(c("2016-01-02 12:00:00",
"2016-01-03 13:12:00",
"2016-01-02 12:00:00",
"2016-01-02 14:00:00",
"2016-01-03 16:53:42"),
tz = "GMT"),
count = c(1, 0, 0, 1, 2)
)
deploy <- data.frame(
cam = c(1, 2, 2, 2),
start = as.POSIXct(c("2015-12-01 15:00:00",
"2015-12-08 00:00:00",
"2016-01-01 00:00:00",
"2016-01-02 00:00:00"),
tz = "GMT"),
end = as.POSIXct(c("2016-01-05 00:00:00",
"2015-12-19 03:30:00",
"2016-01-01 05:00:00",
"2016-01-05 00:00:00"),
tz = "GMT"),
area = c(300, 200, 200, 450)
)
study_dates <- as.POSIXct(c("2016-01-01 00:00:00", "2016-01-04 23:59:59"), tz = "GMT")
?runig
?runif
?sample
# Random sample occasions
occ <- runif(10, study_dates[1], study_dates[2])
occ
# Random sample occasions
occ <- as.POSIXct(runif(10, study_dates[1], study_dates[2]))
# Random sample occasions
occ <- as.POSIXct(runif(10, study_dates[1], study_dates[2]), tz = "GMT")
library(devtools)
build_vignettes()
devtools::load_all(".")
browseVignettes()
browseVignettes(spaceNtime)
browseVignettes("spaceNtime")
build_vignettes()
devtools::load_all(".")
browseVignettes("spaceNtime")
install.packages(c("msm","assertr"))
devtools::load_all(".")
devtools::install_github("annam21/spaceNtime", build_opts = c("--no-resave-data", "--no-manual"), force = T, build_vignettes = T)
install.packages("tidyverse")
devtools::install_github("annam21/spaceNtime", build_opts = c("--no-resave-data", "--no-manual"), force = T, build_vignettes = T)
x <- c(NA, NA, 4)
length(x)
length(is.na(x))
is.na(x)
sum(is.na(x))
sum(is.na(x))/length(x)
